Behaviors
=========

This package provides a behavior called `cultact.subsite.behaviors.ISubsiteAssignment`.


Test setup
----------

Set up the test permissions.

    >>> portal = layer['portal']
    >>> from plone.app.testing import setRoles
    >>> from plone.app.testing import TEST_USER_ID
    >>> setRoles(portal, TEST_USER_ID, ['Manager'])

The cultact.subsite:test profile provides a content type with the behavior enabled.

Create a test document

    >>> portal.invokeFactory('cultact.testdocument', 'doc1', title=u"Doc 1")
    'doc1'
    >>> portal.doc1
    <TestDocument at /plone/doc1>

Out of the box, the behavior properties are not set yet on the object.

    >>> portal.doc1.subsite_home
    Traceback (most recent call last):
    ...
    AttributeError: subsite_home


Using the behavior
------------------

Setting a subsite_home on the behavior sets it on the object

    >>> from cultact.subsite.behaviors import ISubsiteAssignment
    >>> ISubsiteAssignment(portal.doc1).subsite_home = 'maastricht'
    >>> portal.doc1.subsite_home
    'maastricht'

Subsite_home is also propagated to subsite_show

    >>> portal.doc1.subsite_show
    set(['maastricht'])

Setting a different subsite_show auto-adds the home subsite as well.

    >>> ISubsiteAssignment(portal.doc1).subsite_show = set(['sittard'])
    >>> portal.doc1.subsite_show
    set(['sittard', 'maastricht'])

Handling 'None' choices
-----------------------

Create some more test documents

    >>> portal.invokeFactory('cultact.testdocument', 'doc2', title=u"Doc 2")
    'doc2'

    >>> portal.invokeFactory('cultact.testdocument', 'doc3', title=u"Doc 3")
    'doc3'

    >>> portal.invokeFactory('cultact.testdocument', 'doc4', title=u"Doc 4")
    'doc4'

Set the doc3 subsite_home to None stores a string placeholder 'None' to please the KeywordIndex

    >>> ISubsiteAssignment(portal.doc3).subsite_home = None
    >>> portal.doc3.subsite_home
    'None'

    >>> portal.doc3.subsite_show
    set(['None'])


Search the catalog
------------------

    >>> ISubsiteAssignment(portal.doc1).subsite_home = 'maastricht'
    >>> ISubsiteAssignment(portal.doc1).subsite_show = set(['maastricht'])
    >>> portal.doc1.reindexObject()
    >>> ISubsiteAssignment(portal.doc2).subsite_home = 'sittard'
    >>> ISubsiteAssignment(portal.doc2).subsite_show = set(['sittard', 'maastricht'])
    >>> portal.doc2.reindexObject()
    >>> ISubsiteAssignment(portal.doc3).subsite_home = None
    >>> ISubsiteAssignment(portal.doc3).subsite_show = set(['maastricht'])  # + None, automatically
    >>> portal.doc3.reindexObject()
    >>> ISubsiteAssignment(portal.doc4).subsite_home = None
    >>> ISubsiteAssignment(portal.doc4).subsite_show = set([None])
    >>> portal.doc4.reindexObject()

    >>> from Products.CMFCore.utils import getToolByName
    >>> catalog = getToolByName(portal, 'portal_catalog')

Search for maastricht

    >>> result = catalog(subsite_home='maastricht')
    >>> [x.id for x in result]
    ['doc1']

    >>> result = catalog(subsite_show='maastricht')
    >>> sorted([x.id for x in result])
    ['doc1', 'doc2', 'doc3']


Search for sittard

    >>> result = catalog(subsite_home='sittard')
    >>> [x.id for x in result]
    ['doc2']

    >>> result = catalog(subsite_show='sittard')
    >>> [x.id for x in result]
    ['doc2']

Combined search

    >>> result = catalog(subsite_home='sittard', subsite_show='maastricht')
    >>> [x.id for x in result]
    ['doc2']


Searching for None
------------------

Searching for None is not supported by the KeywordIndex.
Instead the behavior stores values of None as 'None' (the string)
so we can now query for 'None'.

    >>> result = catalog(subsite_home='None')
    >>> [x.id for x in result]
    ['doc3', 'doc4']

    >>> result = catalog(subsite_show='None')
    >>> [x.id for x in result]
    ['doc3', 'doc4']

Combined searches involving None

    >>> result = catalog(subsite_home='None', subsite_show='maastricht')
    >>> [x.id for x in result]
    ['doc3']

    >>> result = catalog(subsite_home='None', subsite_show='None')
    >>> [x.id for x in result]
    ['doc3', 'doc4']

